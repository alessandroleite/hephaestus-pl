module HplAssets.ComponentModel.Parsers.SkelComponentModel where

-- Haskell module generated by the BNF converter

import HplAssets.ComponentModel.Parsers.AbsComponentModel
import HplAssets.ComponentModel.Parsers.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transComponentModel :: ComponentModel -> Result
transComponentModel x = case x of
  TComponentModel srcdir componentmappings  -> failure x


transSrcDir :: SrcDir -> Result
transSrcDir x = case x of
  TSrcDir fpath  -> failure x


transComponentMapping :: ComponentMapping -> Result
transComponentMapping x = case x of
  TComponentMapping id fpath  -> failure x


transFPath :: FPath -> Result
transFPath x = case x of
  BasicFPath id  -> failure x
  BasicFPathExt id1 id2  -> failure x
  BasicFPathExt2 id fpath  -> failure x
  BasicFileExt id  -> failure x
  ComposedFPath id fpath  -> failure x
  AbsoluteFPath fpath  -> failure x



