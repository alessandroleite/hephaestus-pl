-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module HplAssets.ComponentModel.Parsers.ParComponentModel where
import HplAssets.ComponentModel.Parsers.AbsComponentModel
import HplAssets.ComponentModel.Parsers.LexComponentModel
import HplAssets.ComponentModel.Parsers.ErrM

}

%name pComponentModel ComponentModel
%name pSrcDir SrcDir
%name pComponentMapping ComponentMapping
%name pFPath FPath
%name pListComponentMapping ListComponentMapping

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '-' { PT _ (TS _ 1) }
  '.' { PT _ (TS _ 2) }
  '/' { PT _ (TS _ 3) }
  ';' { PT _ (TS _ 4) }
  '=' { PT _ (TS _ 5) }
  '=>' { PT _ (TS _ 6) }
  'src-dir' { PT _ (TS _ 7) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

ComponentModel :: { ComponentModel }
ComponentModel : SrcDir ListComponentMapping { TComponentModel $1 $2 } 


SrcDir :: { SrcDir }
SrcDir : 'src-dir' '=' FPath ';' { TSrcDir $3 } 


ComponentMapping :: { ComponentMapping }
ComponentMapping : Ident '=>' FPath { TComponentMapping $1 $3 } 


FPath :: { FPath }
FPath : Ident { BasicFPath $1 } 
  | Ident '.' Ident { BasicFPathExt $1 $3 }
  | Ident '-' FPath { BasicFPathExt2 $1 $3 }
  | '.' Ident { BasicFileExt $2 }
  | Ident '/' FPath { ComposedFPath $1 $3 }
  | '/' FPath { AbsoluteFPath $2 }


ListComponentMapping :: { [ComponentMapping] }
ListComponentMapping : {- empty -} { [] } 
  | ComponentMapping { (:[]) $1 }
  | ComponentMapping ';' ListComponentMapping { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

